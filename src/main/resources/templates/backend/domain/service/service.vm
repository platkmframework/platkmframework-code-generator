/*******************************************************************************
 * Copyright(c) 2023 the original author Eduardo Iglesias Taylor.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	 https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 * 	Eduardo Iglesias Taylor - initial API and implementation
 *******************************************************************************/
 
 /*******************************************************************************
Code generated by platkmframework 
*******************************************************************************/
#set($pktype = $util.getPKJavaType($table))
#set($entityName = ${util.fixToEntityName($table.getName())})
#set($attributeName = ${util.fixToAttributeName($table.getName())}) 
#set($pkColumn = ${util.getPkColumn($table)}) 
package $servicePackage;

import ${daoPackage}.${entityName}DAO;
import ${entityPackage}.${entityName}; 
import ${voPackage}.${entityName}VO;
import org.platkmframework.annotation.Service;
import org.platkmframework.common.domain.filter.criteria.FilterCriteria;
import org.platkmframework.domain.base.dao.exception.DaoException;
import org.platkmframework.util.CloneUtil;
import org.platkmframework.domain.base.service.base.AbstractBaseService;
import java.io.Serializable;


@Service
public class ${entityName}ServiceImpl extends AbstractBaseService<${entityName}, ${entityName}VO, $pktype> implements ${entityName}Service , Serializable{

	private static final long serialVersionUID = 1L;

	public ${entityName}ServiceImpl(${entityName}DAO ${attributeName}DAO){
		super(${attributeName}DAO, ${entityName}VO.class);
	}
  
	@Override
	public ${entityName}VO crudLoad($pktype id) throws DaoException{
		${entityName} ${attributeName} = reposity.load(id);
		if (${attributeName} == null) return null;
		return CloneUtil.clone(${attributeName}, ${entityName}VO.class);
	}

	@Override
	public $pktype crudCreate(${entityName}VO ${attributeName}VO) throws DaoException{ 
		
		${entityName} ${attributeName} = CloneUtil.clone(${attributeName}VO, ${entityName}.class);
		return ${pktype}.valueOf(reposity.insert(${attributeName}).toString()); 
	}

	@Override
	public void crudUpdate(${entityName}VO ${attributeName}VO) throws DaoException{
	
		${entityName} ${attributeName} = reposity.findOne(new FilterCriteria().eq("${pkColumn.getName()}", ${attributeName}VO.get${util.getAttributeForMethodName($pkColumn.getName())}()));
		if( ${attributeName} == null) return;
		
		CloneUtil.clone(${attributeName}VO, ${attributeName});
		reposity.update(${attributeName});
	}
	
	@Override
	public void crudDelete($pktype id) throws DaoException{
			reposity.removeById(id);
	}

}