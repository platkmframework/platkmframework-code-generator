/*******************************************************************************
 * Copyright(c) 2023 the original author Eduardo Iglesias Taylor.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	 https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 * 	Eduardo Iglesias Taylor - initial API and implementation
 *******************************************************************************/
 
/*******************************************************************************
Code generated by platkmframework 
*******************************************************************************/
#set($entityName = ${util.fixToEntityName($table.getName())})
#set($entityAttributeName = ${util.fixToAttributeName($table.getName())}) 

import { Button, Stack, TextField } from '@mui/material';
import { useEffect, useState } from 'react'
import { Link, useNavigate } from 'react-router-dom';  
import ConfirmDialog from '../components/dialog/ConfirmDialog';
import { Search } from '../components/search/pages/Search';
import { Message } from '../components/message/Message';
import { useFetch } from '../hooks/useFetch';
import { useMessage } from '../hooks/useMessage';
import { useForm } from '../hooks/useForm';
import { useSearch } from '../hooks/useSearch';
import {customPadStart, formattedDateYMdmh} from '../js/CustomDateUtil'
import { LocalizationProvider } from '@mui/x-date-pickers';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import dayjs from 'dayjs';

const getCurrentDateFormatted = () => {  
	const cDate =  new Date();  
	return cDate.getFullYear() + "-" + customPadStart( (cDate.getMonth() + 1).toString()) + "-" + customPadStart(cDate.getDate().toString()) + "T00:00:00";
}

export const $entityName = () => {
  
    const  {clean, success, error, msg} = useMessage(); 
    const navigate = useNavigate();
    const [openDelConfirm, setOpenDelConfirm] = useState({value:'', index:'', open:false})
    const {get, put, post} = useFetch();
    const useSearchHook = useSearch('viaje/search','', error);
    const {search, result} = useSearchHook;
    const [dateInfo, setDateInfo] = useState({
#foreach($column in $table.getColumn())
#set($columnJavaType = $util.getColumnJavaType($column))
#set($columnAtrributeName = $util.fixToAttributeName($column.getName()))
#set($columnAtrributeNameLowerCase = $util.fixToAttributeName($column.getName()))
#if($columnJavaType == "java.sql.Timestamp")
  $columnAtrributeName: getCurrentDateFormatted(),
#end
#end
    });  
	const {formState, setFormState, onInputChange, onCheckbokChange, onResetForm} = useForm({
#foreach($column in $table.getColumn())
#set($columnJavaType = $util.getColumnJavaType($column))
#set($columnAtrributeName = $util.fixToAttributeName($column.getName()))
#set($columnAtrributeNameLowerCase = $util.fixToAttributeName($column.getName()))
#if($columnJavaType == "java.sql.Timestamp")
  $columnAtrributeName: getCurrentDateFormatted(),
#elseif($pkColumnJavaType == "java.lang.Boolean")
columnAtrributeName:false,
#else
  '$columnAtrributeName': '',
#end
#end  
     });

    useEffect(() => {
      clean();  
		  search();
    }, [])

    const handleRemoveRecord = (event, id, i)=>{ 
        event.preventDefault();  
        setOpenDelConfirm({...openDelConfirm, value:id, open:true, index:i});
    }

    const handleUpdateRecord = (event, row, i)=>{ 
        event.preventDefault();  
        setFormState(row);
        
        let auxDateInfo = {...dateInfo}
#foreach($column in $table.getColumn()) 
#set($columnJavaType = $util.getColumnJavaType($column))
#set($columnAtrributeName = $util.fixToAttributeName($column.getName())) 
#if($columnJavaType == "java.sql.Timestamp")       
		if(row.$columnAtrributeName!= undefined && row.$columnAtrributeName != '' && row.$columnAtrributeName != null){
		  auxDateInfo.$columnAtrributeName = dayjs(row.$columnAtrributeName) 
		}else{
			auxDateInfo.$columnAtrributeName = new Date();
		}
#end
#end	
        setDateInfo(auxDateInfo) 
    }


    const handleChange = (fieldName, newValue) => {  
  
      let auxDateInfo = {...dateInfo}
      auxDateInfo[fieldName] = newValue;
      setDateInfo(auxDateInfo)
       
      let auxFormState =  {...formState}
      if(newValue == null || newValue == '' || newValue == undefined || isNaN(newValue.$y) || isNaN(newValue.$M) || isNaN(newValue.$D)){
        auxFormState[fieldName] = ''
      }else{    
        auxFormState[fieldName] = formattedDateYMdmh(newValue); ; 
      }
    
      setFormState(auxFormState)  
    }
#if($util.isPkPresent($table))
#set($pkColumn = $util.getPkColumn($table))
#set($pkColumnName = $pkColumn.getName())
#set($pkAttributeName = ${util.fixToAttributeName($pkColumnName)}) 
#set($pkColumnJavaType = $util.getColumnJavaType($pkColumn))
	const handleYes = async( event)=>{
        event.preventDefault();  
        clean();
        put({url:'$entityName.toLowerCase()/remove?$pkAttributeName=' + openDelConfirm.value},
			(status, data)=>{ 
				success('registro eliminado') 
				search();
			}, (status, msg)=>{
				error(msg)
			} 
		)
    }
    
	const onSubmitForm = (event) =>{
		event.preventDefault(); 
		clean();
		if(formState.$pkAttributeName == ''){
			create();
		}else{
			update();
		}
	}
#end
 
	const create = async() =>{
		let auxFormSate = {...formState} 
		post({url:'$entityName.toLowerCase()/create', data:auxFormSate},
			(status, formJson)=>{  
				onResetForm(); 		
				success('registro creado') 
				search();
			}, (status, msg)=>{
				onResetForm();
				error(msg)
			} 
		) 	
	}

	const update = async() =>{
		let auxFormSate = {...formState} 
		put({url:'$entityName.toLowerCase()/update', data: auxFormSate},
			(status, data)=>{ 
				onResetForm();
				success('registro actualizado') 
				search();
			}, (status, msg)=>{
				onResetForm();
				error(msg)
			} 
		) 
	}

	const handleNew = () =>{
		clean();
		onResetForm();
    	setDateInfo(new Date())
	}


  return (
  <>
   <nav className="navbar" style={{"backgroundColor":"#e3f2fd"}}> <p className="fw-semibold">Informaci√≥n de $entityName </p></nav>
	<div style={{marginLeft:'10px', marginRight:'10px'}}>
			<div style={{width:'80%'}} className='container'>	
			<Message msg={msg}/> </div>
			<div style={{width:'80%'}} className='container'>
			<div><p className="fw-semibold">Datos del $entityName</p></div>
				<form onSubmit={onSubmitForm}> 
					<div className='float-none'> 
#set($colCount = 0)
#foreach($column in $table.getColumn()) 
#set($columnJavaType = $util.getColumnJavaType($column))
#set($columnAtrributeName = $util.fixToAttributeName($column.getName()))
#set($columnAtrributeNameLowerCase = $util.fixToAttributeName($column.getName()))
#if($colCount == 0)
						<div className="form-group row ">
#end
						
							<div className="col">
								<label  className="col-sm-10 col-form-label" >$columnAtrributeName #if(!$column.isNullable)*#end</label>
								<div className="col-sm-10">
									<input type="text" 
										id="$columnAtrributeNameLowerCase" 
										name="$columnAtrributeNameLowerCase" 
										className="form-control" 
										placeholder="$columnAtrributeName"  
										required value={formState.estacionorigen}  onChange={(event=>{onInputChange(event, 'estacionorigen')})}/>
								</div>
							</div>
#set($colCount = $colCount + 1)
#if($colCount == 2)						
						</div> 
#set($colCount = 0)
#end
#end
#if($colCount != 0)
                       </div>
#end
					</div>
				</form>
				<div style={{marginTop:'60px'}}>
					<div><p className="fw-semibold">Listado de $entityName</p></div>
				<Search useSearch={useSearchHook} fastsearch  ={true}> 
					<table className="table table-striped table-hover" id="table_ticket_status">
						<thead className="thead-light">
							<tr>
#foreach($column in $table.getColumn()) 
#set($columnJavaType = $util.getColumnJavaType($column))
#set($columnAtrributeName = $util.fixToAttributeName($column.getName()))
#set($columnAtrributeNameLowerCase = $util.fixToAttributeName($column.getName()))
								<th scope="col">$columnAtrributeName</th>  
#end
							</tr>
							
						</thead>
						<tbody id="tbody_ticket_status" >
						{
								result.recordList.map((row, i) =>(
									<tr key={"tr_" + i}> 
#foreach($column in $table.getColumn()) 
#set($columnJavaType = $util.getColumnJavaType($column))
#set($columnAtrributeName = $util.fixToAttributeName($column.getName()))
#set($columnAtrributeNameLowerCase = $util.fixToAttributeName($column.getName())) 
										<td>{row.$columnAtrributeName}</td>  
#end    
										<td>
											<Link
												component="button"
												variant="body2"
												onClick={(event) => {handleUpdateRecord(event, row, i)}} >
												Editar
											</Link> 
										</td>
										<td> 
											<Link
												component="button"
												variant="body2"
												onClick={(event) => {handleRemoveRecord(event, row.id, i)}} >
												Eliminar
											</Link> 
										</td>
									</tr>
									
								))
							}
						</tbody>
					</table>
				</Search>
				</div>
			</div>
	</div>
	<ConfirmDialog openDelConfirm = {openDelConfirm} handleYes={handleYes} />  
 </>
)
}
